import { Circle, makeScene2D, Path, Polygon, Video } from "@motion-canvas/2d";
import { Grid } from "../nodes";
import colors, { colors500, colors700 } from "../lib/colors";
import {
  all,
  createRef,
  createRefMap,
  delay,
  Direction,
  range,
  slideTransition,
  waitFor,
  waitUntil,
} from "@motion-canvas/core";
import spaceX, { spaceNX, spaceNY, spaceY } from "../lib/space";
import { ExtendedTxt } from "../nodes/ExtendedTxt";
import p1V from "../images/prob1.mp4";
import p2V from "../images/prob2.mp4";
import p3V from "../images/prob3.mp4";
import p4V from "../images/prob4.mp4";
import p5V from "../images/prob5.mp4";

export default makeScene2D(function* (view) {
  view.fill(colors.zinc[950]);
  view.fontFamily("Geist");
  //   view.add(
  //     <>
  //       <Grid />
  //     </>
  //   );
  yield* slideTransition(Direction.Bottom, 0.75);
  const polygon = createRef<Polygon>();

  view.add(
    <>
      <Polygon
        ref={polygon}
        sides={1}
        lineWidth={8}
        stroke={"white"}
        size={spaceY[2]}
        scale={0}
      >
        {range(5).map((index) => {
          const colorIndex = Math.floor(Math.random() * colors500.length);
          return (
            <Circle
              fill={colors500[colorIndex]}
              stroke={colors700[colorIndex]}
              lineWidth={4}
              size={spaceY["0.33"]}
              position={() => polygon().vertex(index)}
              opacity={() => polygon().vertexCompletion(index)}
              padding={spaceY["0.5"]}
            >
              <ExtendedTxt text={`${5 - index}`} />
            </Circle>
          );
        })}
      </Polygon>
    </>
  );

  yield* all(
    delay(0.75, polygon().sides(5, 2)),
    polygon().scale(1, 1),
    polygon().size(spaceY[5], 2)
  );

  yield* waitUntil("one");
  const paths = createRefMap<Path>();
  const videos = createRefMap<Video>();
  view.add(
    <>
      <Video
        ref={videos.p1}
        src={p1V}
        radius={10}
        height={spaceY[12]}
        opacity={0}
      />
      <Path
        ref={paths.n1}
        lineWidth={0.5}
        stroke={colors.slate[400]}
        data={
          "M0.90625 3.625C1.63542 3.39583 2.22917 3.20833 2.6875 3.0625C3.14583 2.89583 3.52083 2.76042 3.8125 2.65625C4.14583 2.53125 4.39583 2.41667 4.5625 2.3125L5.3125 1.9375C5.60417 1.79167 5.97917 1.60417 6.4375 1.375C6.89583 1.125 7.48958 0.8125 8.21875 0.4375C8.05208 1.22917 7.92708 1.97917 7.84375 2.6875C7.78125 3.375 7.72917 3.98958 7.6875 4.53125C7.625 5.15625 7.59375 5.72917 7.59375 6.25C7.57292 6.6875 7.54167 7.27083 7.5 8C7.47917 8.72917 7.44792 9.52083 7.40625 10.375C7.36458 11.2292 7.32292 12.1042 7.28125 13C7.23958 13.8958 7.20833 14.7396 7.1875 15.5312C7.1875 16.3021 7.19792 16.9688 7.21875 17.5312C7.26042 18.0938 7.33333 18.4792 7.4375 18.6875C7.54167 18.9375 7.67708 19.1771 7.84375 19.4062C7.98958 19.6146 8.15625 19.8542 8.34375 20.125C8.55208 20.375 8.80208 20.625 9.09375 20.875C8.61458 20.9792 8.16667 21.0729 7.75 21.1562C7.33333 21.2188 6.96875 21.2708 6.65625 21.3125C6.28125 21.375 5.94792 21.4271 5.65625 21.4688C5.34375 21.4896 4.91667 21.5417 4.375 21.625C3.91667 21.6875 3.33333 21.7708 2.625 21.875C1.91667 21.9583 1.04167 22.0521 0 22.1562C0.541667 21.8229 0.96875 21.5 1.28125 21.1875C1.61458 20.875 1.86458 20.6042 2.03125 20.375C2.21875 20.1042 2.33333 19.8438 2.375 19.5938C2.39583 19.4271 2.42708 18.9792 2.46875 18.25C2.53125 17.5 2.58333 16.625 2.625 15.625C2.6875 14.6042 2.73958 13.5208 2.78125 12.375C2.84375 11.2083 2.88542 10.125 2.90625 9.125C2.92708 8.125 2.9375 7.27083 2.9375 6.5625C2.9375 5.85417 2.90625 5.42708 2.84375 5.28125C2.76042 5.13542 2.63542 4.96875 2.46875 4.78125C2.32292 4.61458 2.125 4.4375 1.875 4.25C1.64583 4.0625 1.32292 3.85417 0.90625 3.625Z"
        }
        scale={10}
        end={0}
        position={[spaceNX["0.5"], spaceNY[1.25]]}
      />
    </>
  );
  yield* polygon().scale(0, 0.75);
  yield* paths.n1().end(1, 1);

  videos.p1().play();
  yield* all(
    paths.n1().position([spaceX[7.75], spaceNY[5]], 0.75),
    videos.p1().opacity(1, 0.75),
    paths.n1().scale(7, 0.75)
  );

  yield* waitUntil("two");
  view.add(
    <>
      <Video
        ref={videos.p2}
        src={p2V}
        radius={10}
        height={spaceY[12]}
        opacity={0}
      />
      <Path
        ref={paths.n2}
        lineWidth={0.5}
        stroke={colors.slate[400]}
        data={
          "M0.28125 0.96875C0.677083 1.26042 1.07292 1.47917 1.46875 1.625C1.88542 1.75 2.26042 1.83333 2.59375 1.875C2.96875 1.9375 3.34375 1.94792 3.71875 1.90625C4.07292 1.86458 4.4375 1.73958 4.8125 1.53125C5.1875 1.32292 5.625 1.10417 6.125 0.875C6.625 0.645833 7.20833 0.447917 7.875 0.28125C8.5625 0.09375 9.38542 0 10.3438 0C10.7604 0 11.1979 0.0833333 11.6562 0.25C12.1354 0.416667 12.5938 0.635417 13.0312 0.90625C13.4688 1.15625 13.8646 1.4375 14.2188 1.75C14.5938 2.0625 14.875 2.375 15.0625 2.6875C15.2708 3 15.4167 3.51042 15.5 4.21875C15.5833 4.90625 15.6146 5.65625 15.5938 6.46875C15.5729 7.28125 15.5 8.08333 15.375 8.875C15.2708 9.66667 15.1146 10.3125 14.9062 10.8125C14.6562 11.25 14.1771 11.8125 13.4688 12.5C12.8646 13.0833 11.9583 13.8333 10.75 14.75C9.54167 15.6667 7.91667 16.7604 5.875 18.0312C7.08333 18.0104 8.09375 17.9792 8.90625 17.9375C9.73958 17.875 10.4167 17.8125 10.9375 17.75C11.5417 17.6667 12.0208 17.5833 12.375 17.5C12.6875 17.375 13.0208 17.1979 13.375 16.9688C13.6667 16.7604 13.9792 16.4896 14.3125 16.1562C14.6667 15.8229 15.0104 15.3854 15.3438 14.8438C15.4062 15.9688 15.4688 16.8542 15.5312 17.5C15.5729 17.875 15.6042 18.1979 15.625 18.4688C15.6458 18.7188 15.6667 19.0104 15.6875 19.3438C15.7083 19.6354 15.7188 19.9688 15.7188 20.3438C15.7396 20.7188 15.7708 21.1146 15.8125 21.5312C14.7708 21.2604 13.8229 21.0521 12.9688 20.9062C12.1146 20.7396 11.3854 20.625 10.7812 20.5625C10.0729 20.4792 9.4375 20.4375 8.875 20.4375C8.29167 20.4583 7.64583 20.5104 6.9375 20.5938C6.3125 20.6771 5.5625 20.8021 4.6875 20.9688C3.83333 21.1146 2.86458 21.3333 1.78125 21.625C1.69792 21.3958 1.625 21.1667 1.5625 20.9375C1.5 20.6875 1.44792 20.4479 1.40625 20.2188C1.34375 19.9688 1.29167 19.7188 1.25 19.4688C1.20833 19.2188 1.16667 18.9792 1.125 18.75C1.08333 18.5417 1.05208 18.3229 1.03125 18.0938C1.01042 17.8646 0.989583 17.6458 0.96875 17.4375C2.63542 16.375 3.98958 15.4167 5.03125 14.5625C6.07292 13.6875 6.89583 12.9479 7.5 12.3438C8.1875 11.6354 8.70833 10.9896 9.0625 10.4062C9.41667 9.69792 9.70833 8.91667 9.9375 8.0625C10.1667 7.20833 10.2396 6.41667 10.1562 5.6875C10.0938 4.95833 9.84375 4.36458 9.40625 3.90625C8.96875 3.42708 8.27083 3.21875 7.3125 3.28125C6.6875 3.32292 6.09375 3.54167 5.53125 3.9375C4.98958 4.33333 4.48958 4.8125 4.03125 5.375C3.57292 5.9375 3.16667 6.54167 2.8125 7.1875C2.45833 7.8125 2.15625 8.40625 1.90625 8.96875C1.67708 9.53125 1.48958 10 1.34375 10.375C1.21875 10.75 1.15625 10.9479 1.15625 10.9688C1.13542 11.0104 1.10417 10.8542 1.0625 10.5C1.04167 10.1458 1.01042 9.70833 0.96875 9.1875C0.947917 8.64583 0.916667 8.08333 0.875 7.5C0.833333 6.91667 0.791667 6.42708 0.75 6.03125C0.729167 5.71875 0.697917 5.3125 0.65625 4.8125C0.59375 4 0.46875 2.71875 0.28125 0.96875Z"
        }
        scale={10}
        end={0}
        position={[spaceNX["0.5"], spaceNY[1.25]]}
      />
    </>
  );
  yield* all(
    paths.n1().end(0, 0.75),
    paths.n1().opacity(0, 0.75),
    videos.p1().opacity(0, 0.75)
  );
  yield* paths.n2().end(1, 1);

  yield* all(
    paths.n2().position([spaceX[7.75], spaceNY[5]], 0.75),
    videos.p2().opacity(1, 0.75),
    paths.n2().scale(7, 0.75)
  );
  yield* waitUntil("padding");
  videos.p2().play();

  yield* waitUntil("three");
  view.add(
    <>
      <Video
        ref={videos.p3}
        src={p3V}
        radius={10}
        height={spaceY[12]}
        opacity={0}
      />
      <Path
        ref={paths.n3}
        lineWidth={0.5}
        stroke={colors.slate[400]}
        data={
          "M0.96875 0.15625C1.32292 0.40625 1.6875 0.59375 2.0625 0.71875C2.4375 0.84375 2.77083 0.9375 3.0625 1C3.41667 1.08333 3.76042 1.125 4.09375 1.125C4.51042 1.125 4.88542 1.07292 5.21875 0.96875C5.57292 0.864583 5.95833 0.760417 6.375 0.65625C6.79167 0.552083 7.27083 0.46875 7.8125 0.40625C8.35417 0.322917 9.03125 0.3125 9.84375 0.375C10.6562 0.4375 11.3854 0.625 12.0312 0.9375C12.6771 1.22917 13.2188 1.60417 13.6562 2.0625C14.1146 2.5 14.4688 2.98958 14.7188 3.53125C14.9688 4.07292 15.0938 4.625 15.0938 5.1875C15.0521 6.04167 14.9167 6.84375 14.6875 7.59375C14.4792 8.23958 14.1562 8.875 13.7188 9.5C13.2812 10.1042 12.6354 10.5312 11.7812 10.7812C12.8229 10.9271 13.6354 11.1979 14.2188 11.5938C14.8229 11.9896 15.2917 12.3958 15.625 12.8125C16 13.3125 16.2604 13.8542 16.4062 14.4375C16.5312 15.2083 16.5208 16 16.375 16.8125C16.2292 17.6042 15.9583 18.3542 15.5625 19.0625C15.1875 19.75 14.6667 20.3646 14 20.9062C13.3542 21.4271 12.5729 21.8125 11.6562 22.0625C11.0312 22.2292 10.3125 22.2708 9.5 22.1875C8.70833 22.0833 7.9375 21.9375 7.1875 21.75C6.4375 21.5625 5.76042 21.375 5.15625 21.1875C4.55208 21 4.13542 20.9167 3.90625 20.9375C3.71875 20.9583 3.5 21.0312 3.25 21.1562C3.02083 21.2604 2.75 21.4271 2.4375 21.6562C2.14583 21.8646 1.79167 22.1667 1.375 22.5625C1.47917 21.625 1.55208 20.875 1.59375 20.3125C1.65625 19.75 1.70833 19.3021 1.75 18.9688C1.79167 18.5938 1.8125 18.3125 1.8125 18.125V17.4375C1.8125 17.1875 1.80208 16.8646 1.78125 16.4688C1.76042 16.0729 1.73958 15.5729 1.71875 14.9688C2.78125 16.2604 3.78125 17.2292 4.71875 17.875C5.65625 18.5208 6.47917 18.9896 7.1875 19.2812C8.02083 19.6146 8.78125 19.7708 9.46875 19.75C10.0521 19.7083 10.5208 19.5208 10.875 19.1875C11.2292 18.8333 11.4792 18.4167 11.625 17.9375C11.7708 17.4583 11.8229 16.9479 11.7812 16.4062C11.7396 15.8438 11.6042 15.3229 11.375 14.8438C11.1667 14.3438 10.875 13.9167 10.5 13.5625C10.125 13.1875 9.6875 12.9583 9.1875 12.875C8.58333 12.7708 8.01042 12.7604 7.46875 12.8438C6.98958 12.9062 6.48958 13.0521 5.96875 13.2812C5.44792 13.4896 5.01042 13.8542 4.65625 14.375C4.61458 14.0208 4.58333 13.7188 4.5625 13.4688C4.5625 13.2188 4.55208 13.0104 4.53125 12.8438C4.51042 12.6562 4.5 12.5208 4.5 12.4375C4.5 12.3333 4.48958 12.1771 4.46875 11.9688C4.44792 11.8021 4.42708 11.5833 4.40625 11.3125C4.40625 11.0208 4.38542 10.6562 4.34375 10.2188C4.71875 10.3229 5.07292 10.4062 5.40625 10.4688C5.73958 10.5104 6.03125 10.5417 6.28125 10.5625C6.57292 10.5833 6.84375 10.5833 7.09375 10.5625C7.40625 10.5417 7.78125 10.4271 8.21875 10.2188C8.67708 9.98958 9.10417 9.6875 9.5 9.3125C9.89583 8.9375 10.2083 8.48958 10.4375 7.96875C10.6875 7.44792 10.7708 6.875 10.6875 6.25C10.5 4.97917 10.0729 4.07292 9.40625 3.53125C8.76042 2.96875 8.09375 2.70833 7.40625 2.75C6.94792 2.8125 6.40625 3.03125 5.78125 3.40625C5.23958 3.71875 4.59375 4.19792 3.84375 4.84375C3.11458 5.46875 2.28125 6.35417 1.34375 7.5C1.38542 6.9375 1.40625 6.4375 1.40625 6C1.40625 5.54167 1.40625 5.16667 1.40625 4.875C1.40625 4.52083 1.39583 4.20833 1.375 3.9375L1.28125 3C1.23958 2.6875 1.19792 2.29167 1.15625 1.8125C1.11458 1.33333 1.05208 0.78125 0.96875 0.15625Z"
        }
        scale={10}
        end={0}
        position={[spaceNX["0.5"], spaceNY[1.25]]}
      />
    </>
  );
  videos.p3().play();
  yield* all(
    paths.n2().end(0, 0.75),
    paths.n2().opacity(0, 0.75),
    videos.p2().opacity(0, 0.75)
  );
  yield* paths.n3().end(1, 1);

  yield* all(
    paths.n3().position([spaceX[7.75], spaceNY[5]], 0.75),
    videos.p3().opacity(1, 0.75),
    paths.n3().scale(7, 0.75)
  );

  yield* waitUntil("four");
  view.add(
    <>
      <Video
        ref={videos.p4}
        src={p4V}
        radius={10}
        height={spaceY[12]}
        opacity={0}
      />
      <Path
        ref={paths.n4}
        lineWidth={0.5}
        stroke={colors.slate[400]}
        data={
          "M5.4375 0.375C6.125 0.416667 6.6875 0.447917 7.125 0.46875C7.58333 0.489583 7.94792 0.5 8.21875 0.5C8.53125 0.520833 8.77083 0.520833 8.9375 0.5H9.75C10.0625 0.5 10.5 0.510417 11.0625 0.53125C11.6458 0.53125 12.4062 0.541667 13.3438 0.5625C13.2396 0.708333 13.1562 0.885417 13.0938 1.09375C13.0312 1.30208 12.9792 1.51042 12.9375 1.71875C12.875 1.94792 12.8333 2.19792 12.8125 2.46875C12.7917 2.80208 12.75 3.32292 12.6875 4.03125C12.6458 4.63542 12.5833 5.47917 12.5 6.5625C12.4375 7.625 12.3542 9.01042 12.25 10.7188C12.8542 10.7188 13.375 10.6667 13.8125 10.5625C14.25 10.4375 14.6146 10.2917 14.9062 10.125C15.2396 9.95833 15.5104 9.76042 15.7188 9.53125C15.8229 9.40625 15.9375 9.27083 16.0625 9.125C16.1667 9 16.3021 8.86458 16.4688 8.71875C16.6354 8.57292 16.8125 8.41667 17 8.25C16.9583 8.8125 16.9271 9.30208 16.9062 9.71875C16.8854 10.1146 16.8646 10.4479 16.8438 10.7188C16.8229 11.0312 16.8021 11.2812 16.7812 11.4688C16.7812 11.6979 16.7604 12 16.7188 12.375C16.6771 12.7083 16.6354 13.1562 16.5938 13.7188C16.5521 14.2604 16.5104 14.9479 16.4688 15.7812C16.2604 15.3646 16.0625 15.0417 15.875 14.8125C15.7083 14.5625 15.5625 14.375 15.4375 14.25C15.2708 14.1042 15.125 14 15 13.9375C14.8542 13.8958 14.6562 13.8542 14.4062 13.8125C14.1771 13.7708 13.8854 13.75 13.5312 13.75C13.1979 13.7292 12.7604 13.7083 12.2188 13.6875C12.2188 14.9167 12.2396 15.9062 12.2812 16.6562C12.3438 17.4062 12.4062 17.9896 12.4688 18.4062C12.5521 18.9062 12.6458 19.2604 12.75 19.4688C12.875 19.6562 13.0521 19.875 13.2812 20.125C13.4896 20.3542 13.7708 20.625 14.125 20.9375C14.4792 21.25 14.9375 21.6042 15.5 22C15.0208 22.1042 14.5625 22.1771 14.125 22.2188C13.7083 22.2396 13.3229 22.2708 12.9688 22.3125C12.5729 22.3542 12.1979 22.375 11.8438 22.375C11.4688 22.375 11.0104 22.3958 10.4688 22.4375C9.98958 22.4792 9.39583 22.5208 8.6875 22.5625C7.97917 22.6042 7.125 22.6562 6.125 22.7188C6.47917 22.3646 6.76042 22.0417 6.96875 21.75C7.19792 21.4375 7.375 21.1667 7.5 20.9375C7.64583 20.6875 7.75 20.4688 7.8125 20.2812C7.85417 20.0521 7.91667 19.6667 8 19.125C8.0625 18.6667 8.13542 18.0312 8.21875 17.2188C8.30208 16.4062 8.39583 15.3333 8.5 14L0 14.0938L0.15625 12C1.17708 10.5417 1.98958 9.33333 2.59375 8.375C3.21875 7.39583 3.69792 6.60417 4.03125 6C4.40625 5.3125 4.67708 4.77083 4.84375 4.375C4.94792 4 5.04167 3.60417 5.125 3.1875C5.20833 2.83333 5.28125 2.41667 5.34375 1.9375C5.40625 1.4375 5.4375 0.916667 5.4375 0.375ZM8.875 11.0312C8.91667 10.4688 8.94792 9.95833 8.96875 9.5C9.01042 9.02083 9.04167 8.60417 9.0625 8.25C9.08333 7.85417 9.09375 7.47917 9.09375 7.125V5.96875C9.09375 5.59375 9.09375 5.15625 9.09375 4.65625C9.11458 4.13542 9.13542 3.55208 9.15625 2.90625L4.5625 11.0938L8.875 11.0312Z"
        }
        scale={10}
        end={0}
        position={[spaceNX["0.5"], spaceNY[1.25]]}
      />
    </>
  );
  yield* all(
    paths.n3().end(0, 0.75),
    paths.n3().opacity(0, 0.75),
    videos.p3().opacity(0, 0.75)
  );
  yield* paths.n4().end(1, 1);

  videos.p4().play();
  yield* all(
    paths.n4().position([spaceX[7.75], spaceNY[5]], 0.75),
    videos.p4().opacity(1, 0.75),
    paths.n4().scale(7, 0.75)
  );

  yield* waitUntil("five");
  view.add(
    <>
      <Video
        ref={videos.p5}
        src={p5V}
        radius={10}
        height={spaceY[12]}
        opacity={0}
      />
      <Path
        ref={paths.n5}
        lineWidth={0.5}
        stroke={colors.slate[400]}
        data={
          "M1.84375 0.5625C2.84375 0.75 3.71875 0.885417 4.46875 0.96875C5.21875 1.05208 5.85417 1.11458 6.375 1.15625C6.97917 1.19792 7.5 1.20833 7.9375 1.1875C8.375 1.1875 8.92708 1.15625 9.59375 1.09375C10.1562 1.05208 10.8646 1 11.7188 0.9375C12.5938 0.854167 13.625 0.760417 14.8125 0.65625C14.75 1.21875 14.6875 1.72917 14.625 2.1875C14.5833 2.625 14.5417 3 14.5 3.3125C14.4583 3.6875 14.4271 4.02083 14.4062 4.3125C14.3854 4.625 14.3542 4.97917 14.3125 5.375C14.2708 5.72917 14.2292 6.16667 14.1875 6.6875C14.1667 7.20833 14.1458 7.8125 14.125 8.5C13.3333 7.1875 12.6146 6.17708 11.9688 5.46875C11.3229 4.73958 10.7604 4.19792 10.2812 3.84375C9.73958 3.44792 9.25 3.20833 8.8125 3.125H7.53125C7.15625 3.125 6.75 3.13542 6.3125 3.15625C5.875 3.17708 5.47917 3.21875 5.125 3.28125L5.25 10.6562C5.66667 10.1354 6.125 9.75 6.625 9.5C7.125 9.25 7.61458 9.07292 8.09375 8.96875C8.63542 8.86458 9.1875 8.82292 9.75 8.84375C11.2083 8.96875 12.3333 9.21875 13.125 9.59375C13.9375 9.96875 14.5208 10.5208 14.875 11.25C15.0417 11.625 15.1771 12.1979 15.2812 12.9688C15.4062 13.7188 15.4479 14.5312 15.4062 15.4062C15.3646 16.2812 15.2292 17.1458 15 18C14.7708 18.8333 14.4062 19.5104 13.9062 20.0312C13.4062 20.5312 12.9167 20.9479 12.4375 21.2812C11.9583 21.5938 11.4792 21.8542 11 22.0625C10.5208 22.25 10.0208 22.3854 9.5 22.4688C8.97917 22.5521 8.42708 22.6146 7.84375 22.6562C6.90625 22.7188 6.01042 22.6146 5.15625 22.3438C4.30208 22.0729 3.55208 21.7083 2.90625 21.25C2.26042 20.7917 1.73958 20.3021 1.34375 19.7812C0.947917 19.2396 0.729167 18.75 0.6875 18.3125C0.645833 17.9792 0.625 17.6458 0.625 17.3125C0.625 17.0208 0.635417 16.7188 0.65625 16.4062C0.697917 16.0938 0.770833 15.8229 0.875 15.5938L8.96875 16.1562C8.17708 16.4062 7.58333 16.6771 7.1875 16.9688C6.79167 17.2396 6.51042 17.5 6.34375 17.75C6.13542 18.0417 6.05208 18.3333 6.09375 18.625C6.23958 19.375 6.5 19.9896 6.875 20.4688C7.25 20.9271 7.67708 21.1146 8.15625 21.0312C8.40625 20.9896 8.6875 20.8229 9 20.5312C9.33333 20.2188 9.64583 19.8333 9.9375 19.375C10.25 18.9167 10.5208 18.4062 10.75 17.8438C11 17.2604 11.1562 16.6771 11.2188 16.0938C11.2812 15.5104 11.3229 14.8958 11.3438 14.25C11.3854 13.6042 11.3646 13.0104 11.2812 12.4688C11.1979 11.9271 11.0521 11.4792 10.8438 11.125C10.6354 10.75 10.3333 10.5625 9.9375 10.5625C9.60417 10.6042 9.22917 10.7396 8.8125 10.9688C8.45833 11.1771 8.03125 11.4896 7.53125 11.9062C7.05208 12.3229 6.51042 12.9271 5.90625 13.7188C5.48958 13.6146 5.13542 13.5104 4.84375 13.4062C4.57292 13.2812 4.34375 13.1771 4.15625 13.0938C3.92708 13.0104 3.75 12.9167 3.625 12.8125C3.5 12.7292 3.33333 12.625 3.125 12.5C2.95833 12.3958 2.75 12.2708 2.5 12.125C2.25 11.9583 1.94792 11.7604 1.59375 11.5312C1.67708 10.7188 1.72917 10.0312 1.75 9.46875C1.77083 8.90625 1.79167 8.44792 1.8125 8.09375V7.0625C1.79167 6.77083 1.78125 6.34375 1.78125 5.78125C1.78125 5.30208 1.78125 4.64583 1.78125 3.8125C1.78125 2.95833 1.80208 1.875 1.84375 0.5625Z"
        }
        scale={10}
        end={0}
        position={[spaceNX["0.5"], spaceNY[1.25]]}
      />
    </>
  );
  yield* all(
    paths.n4().end(0, 0.75),
    paths.n4().opacity(0, 0.75),
    videos.p4().opacity(0, 0.75)
  );
  yield* paths.n5().end(1, 1);

  videos.p5().play();
  yield* all(
    paths.n5().position([spaceX[7.75], spaceNY[5]], 0.75),
    videos.p5().opacity(1, 0.75),
    paths.n5().scale(7, 0.75)
  );

  yield* waitUntil("scene03End");
});
